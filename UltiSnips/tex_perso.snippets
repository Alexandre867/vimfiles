global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def nomath():
	return vim.eval('vimtex#syntax#in_mathzone()') == '0'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

def create_row_placeholders(snip):
    # retrieving single line from current string and treat it like tabstops
    # count
    placeholders_amount = int(snip.buffer[snip.line].strip())

    # erase current line
    snip.buffer[snip.line] = ''

    # create anonymous snippet with expected content and number of tabstops
    anon_snippet_body = ' & '.join(['$' + str(i+1)
                                    for i in range(placeholders_amount)])

    # expand anonymous snippet
    snip.expand_anon(anon_snippet_body)

def create_table(snip):
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]
	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))
	rows = int_val(rows)
	cols = int_val(cols)
	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	snip.buffer[snip.line] = ''
	final_str = old_spacing + "\\begin{tabular}{|" + "|".join(['$' + str(i + 1) for i in range(cols)]) + "|}\n"
	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])
		final_str += " \\\\\\\n"
	final_str += old_spacing + "\\end{tabular}\n$0"
	snip.expand_anon(final_str)

endglobal

pre_expand "create_table(snip)"
snippet "gentbl(\d+)x(\d+)" "Generate table of *width* by *height*" r
endsnippet

snippet # "Put in brackets" i
\\${1:emph}{${VISUAL}$2}$0
endsnippet

snippet \beg "begin{} / end{}" A
\begin{$1}$2
	$0
\end{$1}
endsnippet

snippet \bs "\baselineskip" iA
\baselineskip
endsnippet

snippet \hsp "hspace" iA
\hspace{${1:0pt}}$0
endsnippet

context "nomath()"
snippet sqq "subquestion" bA
\subquestion[${1:1}]{${2:a}}$0
endsnippet

context "nomath()"
snippet qq "question" bA
\question[${1:1}]$0
endsnippet

snippet "\b\\?si" "si" r
\si{$1}
endsnippet

snippet "\b\\?num" "num" r
\num{$1}
endsnippet

snippet ii "new item" b
\item 
endsnippet

context "math()"
snippet '(?<!\\)_' "Subscript" ir
_{$1}$0
endsnippet

context "math()"
# snippet "(?<![\\ ])(?<!\\,) " "Math space" irA
snippet " " "Math space" ir
\,
endsnippet

# context "math()"
# snippet "\\, " "Math space" iA
# `!p snip.rv="  "`
# endsnippet

priority 10
context "math()"
snippet "(?<!\\)," "comma" irA
,\,
endsnippet

priority 1000
context "nomath()"
snippet '(?<!\\)_' "Subscript in text" ir
\low{$1}$0
endsnippet

# snippet '([A-Za-z])(\d)' "auto subscript" rA
# `!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
# endsnippet

context "math()"
snippet "(?<!\\)(\^)" "Superscript" ir
^{$1}$0
endsnippet

context "nomath()"
snippet "(?<!\\)(\^)" "Superscript in text" ir
\pow{$1}$0
endsnippet

snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\overrightarrow{`!p snip.rv=match.group(1)`$1}$0
endsnippet 

post_jump "create_row_placeholders(snip)"
snippet "tr(\d+)" "latex table row variable" br
`!p snip.rv = match.group(1)`
endsnippet

# priority 100
context "nomath()"
snippet '(\\(sub)*section\{)?(\\sec)' "Section and subsection" rA
`!p 
if not match.group(1):
	snip.rv = "\\section{"
	close_br = True
else:
	snip.rv = "\\sub" + match.group(1)[1:]
	close_br = False
`$1`!p if close_br: snip.rv="}"`
endsnippet

# priority 10
# snippet '(\\\\(sub)*section\\{)?(\\sec)' "Section and subsection" rA
# \section{$1}
# $0
# endsnippet

# Changes to Castel snips
priority 100000000
context "math()"
snippet "\b([B-DF-Z])\1" "\mathbb" rA
\mathbb{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet "\\?binom"" "binom" irA
\binom{${1:x}}{${2:y}}
endsnippet

# context "nomath()"
snippet "\b\\\w+(?![{a-zA-Z])\b" "command" r
`!p snip.rv=match.group(0)`{$1}$0
endsnippet

context "math()"
# snippet '(([a-zA-Z0-9.,\\])*((\^|_)(\{[^{}]*\}|\w))*)/' "symbol frac" rA
snippet '(([a-zA-Z0-9.,\\\(\)]|(\^|_)(\{[^{}]*\}|\w))+)/' "symbol frac" rA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

snippet lr "left( right)" i
\left${1:(} ${2:${VISUAL}} \right${3:)} $0
endsnippet

snippet "\b\\?SI" "SI" r
\SI{$1}{$2}
endsnippet
